{"version":3,"file":"app.d4257861746382beea91.hot-update.js","sources":["/Users/xavier/Programming/React/watchr2/src/tags.js"],"sourcesContent":["/*global chrome*/\nimport React, { Component } from 'react'\nimport TagsPaper from './tagsPaper'\nimport CurrentTagPaper from './currentTagPaper'\nimport ApiCall from './Backend/apiCall';\n\nexport default class Tags extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags: [\"\"],\n            savedTags: [\"\"]\n        };\n        this.getTags = this.getTags.bind(this);\n        this.getChromeStoragefunction = this.getChromeStoragefunction.bind(this);\n        this.saveArrayToState = this.saveArrayToState.bind(this);\n    }\n\n    componentDidMount() {\n        let newThis = this;\n        chrome.storage.local.get(['tags'], function (result) {\n            console.log(\"retrieved tags is\" + result.tags);\n            // you can use the variable or set to any state variable from here\n            newThis.saveArrayToState(result.tags);\n          });\n        console.log(\"SavedTags in tags.js:\" + this.state.savedTags);\n        this.getChromeStoragefunction(this.state.savedTags);\n    }\n\n    getChromeStoragefunction(saved) {\n        let newThis = this;\n        chrome.storage.onChanged.addListener(function (changes, namespace) {\n            let tempArray = [...saved];\n            for (var key in changes) {\n                var storageChange = changes[key];\n                storageChange.newValue.map(e => { console.log(\"new values \" + e) })\n                // console.log('Storage key \"%s\" in namespace \"%s\" changed. ' +\n                //             'Old value was \"%s\", new value is \"%s\".',\n                //             key,\n                //             namespace,\n                //             storageChange.oldValue,\n                //             storageChange.newValue);\n                storageChange.newValue.map(e => { tempArray.push(e) })\n                newThis.saveArrayToState(tempArray);\n            }\n\n        });\n    }\n\n    saveArrayToState = (array) => {\n        this.setState({\n            savedTags: array\n        })\n\n    }\n    getTags(e) {\n        this.setState({\n            tags: e\n        })\n        console.log(e)\n    }\n\n    render() {\n\n        return (\n            <div >\n                <p>\n                    Get recommendations for articles that matches your\n                    interests when you follow more tags:\n                </p>\n                <b>\n                    You are following\n                </b>\n\n                <TagsPaper savedTagArray={this.state.savedTags} />\n                <b>\n                    From this article\n                </b>\n\n                <CurrentTagPaper tagArray={this.state.tags} />\n                <ApiCall getTags={this.getTags} tags={this.state.tags} />\n            </div>\n        )\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AA2CA;AACA;AADA;AAIA;AACA;AA9CA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AA9EA;;;;A","sourceRoot":""}